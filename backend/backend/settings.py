"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
import pprint
import socket
import yaml

from backend.httpLogger import TZOffsetFormatter

def get_env_configs():
    yml_file = "{}/env.yml".format(BASE_DIR).replace("\\", "/")
    with open(yml_file) as open_file:
        return yaml.load(open_file, Loader=yaml.FullLoader)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)

PRETTY = pprint.PrettyPrinter(depth=2)

SECRET_KEY = os.environ["OKTA_CLIENT_SECRET"]
CFG_KEY = os.environ["MODE"]

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

SCHEME = "https://"
DEBUG = False
if CFG_KEY == "LOCAL_DEV":
    SCHEME = "http://"
    print("Running on local Dev.")
    DEBUG = True
elif CFG_KEY == "AWS_DEV":
    print("Running on hosted Dev.")
elif CFG_KEY == "PROD":
    print("Running on Production.")

ENV = get_env_configs()
CFGS = ENV.get(CFG_KEY)

# Application definition
INSTALLED_APPS = [
    'channels',
    'corsheaders',
    'rest_framework',
    'django.contrib.admin', 
    'django.contrib.auth',
    'django.contrib.contenttypes', 
    'django.contrib.sessions',
    'django.contrib.messages', 
    'django.contrib.staticfiles',
    'frontend.apps.FrontendConfig',
    'okta_auth',
]

AUTH_USER_MODEL = 'okta_auth.VCUser'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',    
    'okta_auth.auth_backend.OktaAuthBackend',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'csp.middleware.CSPMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# SECURITY WARNING: don't run with debug turned on in production!
try:
    IP = socket.gethostbyname("localhost")
except:
    IP = socket.gethostbyname(socket.gethostname())
print(f"IP is {IP}")

ALLOWED_HOSTS = [IP]
__csrf_origins__ = []

# #############################################################################
# #############################################################################
if CFG_KEY == "LOCAL_DEV":
    # ########## CORS/CSRF ####################################################
    CORS_ALLOW_ORIGIN_ALL = True
    # #### Content-Security-Policy ############################################
    CSP_INCLUDE_NONCE_IN = [
        'script-src',
        'style-src',
        'connect-src',
        'font-src',
        'img-src'
    ]    

    CSP_FRAME_ANCESTORS = ()

    CSP_FRAME_SRC = (CFGS.get("ORG_URL"),)

    CSP_BASE_URI = ("'self'",)

    CSP_OBJECT_SRC = ("'none'",)

    CSP_DEFAULT_SRC = ("'self'",)

    CSP_STYLE_SRC = (
        "'self'",
        "fonts.googleapis.com",
    )

    CSP_SCRIPT_SRC = (
        "'self'",
    )

    CSP_CONNECT_SRC = (
        "'self'", 
        CFGS.get("ORG_URL"),
        "ws:",
        "wss:"
    )
    CSP_FONT_SRC = (
        "'self'",
        "fonts.gstatic.com/"
    )

    CSP_IMG_SRC = (
        "'self'",
    )
else:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    ALLOWED_HOSTS.extend(
        [
            CFGS.get("SELF"),
            CFGS.get("ORIGIN"),
            os.environ["HOST_IP"]
        ]
    )
    # #### CORS/CSRF ##########################################################
    __csrf_origins__.extend(
        [
            f"{SCHEME}{CFGS.get('SELF')}",
            CFGS.get("ORG_URL")
        ]
    )    
    CORS_ALLOW_ORIGIN_ALL = False
    CSRF_TRUSTED_ORIGINS = __csrf_origins__
    CORS_ALLOWED_ORIGINS = [
        f"{SCHEME}{CFGS.get('SELF')}",
        CFGS.get("ORG_URL"),
    ]

    CSRF_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SECURE = True  
    SESSION_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_SECURE = True

    # #### Content-Security-Policy ############################################
    CSP_INCLUDE_NONCE_IN = [
        'script-src',
        'style-src',
        'connect-src',
        'font-src',
        'img-src'
    ]  

    CSP_FRAME_ANCESTORS = ()
    
    CSP_FRAME_SRC = (CFGS.get("ORG_URL"),)

    CSP_BASE_URI = ("'self'",)

    CSP_OBJECT_SRC = ("'none'",)

    CSP_DEFAULT_SRC = ("'self'",)
    
    CSP_STYLE_SRC = (
        "'self'",
        "fonts.googleapis.com",
    )

    CSP_SCRIPT_SRC = ("'strict-dynamic'",)

    CSP_CONNECT_SRC = (
        "'self'", 
        CFGS.get("ORG_URL"),
        "ws:",
        "wss:"
    )
    CSP_FONT_SRC = (
        "'self'",
        "fonts.gstatic.com"
    )
    CSP_IMG_SRC = (
        "'self'",
    )

# #############################################################################
# #############################################################################
CACHE_TIMEOUT = 3600 # Base timeout for sensitive cached items; 1 hour.

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "frontend")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
ASGI_APPLICATION = 'backend.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if CFG_KEY == 'LOCAL_DEV':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'this-is-local-cache',
        }
    }    
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        }
    }    
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "=====",
            "USER": "=====",
            "PASSWORD": os.environ["RDS_PASSWORD"],
            "HOST": os.environ["RDS_HOST"],
            "PORT": os.environ["RDS_PORT"]
        },
    }
    SESSION_ENGINE: "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "redis://{}".format(os.environ["REDIS_HOST"]),
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "SOCKET_CONNECT_TIMEOUT": 5,
                "SOCKET_TIMEOUT": 5,
            }
        }
    }
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [
                    (
                        os.environ["REDIS_HOST"],
                        int(os.environ["REDIS_PORT"])
                    )
                ],
            },
        },
    }

# ############################ OKTA GLOBALS ###################################
# ##### BACKEND AUTH ##########################################################
# This covers token authorization from front end to back end.
CLIENT_ID = os.environ["OKTA_CLIENT_ID"]
CLIENT_SECRET = os.environ["OKTA_CLIENT_SECRET"]
USERINFO_ENDPOINT = "{}/{}/{}".format(
    CFGS.get("ORG_URL"),
    CFGS.get("ISSUER_PATH"),
    CFGS.get("USERINFO_EP")
)
INTROSPECT_ENDPOINT = "{}/{}/{}".format(
    CFGS.get("ORG_URL"),
    CFGS.get("ISSUER_PATH"),
    CFGS.get("TOKEN_INTROSPECTION_EP")
)
# #############################################################################

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# =============================================================================
# =================================== LOGGING =================================
# =============================================================================
log_level = "DEBUG" if DEBUG else "INFO"
handlers = ["console"] if DEBUG else ["console"]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'root': {
            '()': TZOffsetFormatter,
            'format': 'ROOT! [%(levelname)-s] - - [%(asctime)s] %(name)s:%(funcName)s %(lineno)d -- %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'timezone': "US/Pacific",   
        },        
        'simple': {
            '()': TZOffsetFormatter,
            'format': 'CONSOLE! [%(levelname)-s] - - [%(asctime)s] - %(name)s - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'timezone': "US/Pacific",   
        },
        'core': {
            '()': TZOffsetFormatter,
            'format': '[%(levelname)-s] - - [%(asctime)s] %(name)s:%(funcName)s %(lineno)d -- %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'timezone': "US/Pacific",            
        },
    },
    'handlers': {
        'root_handler': {
            'class': 'logging.StreamHandler',
            'formatter': 'root',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'core_handler': {
            'class': 'logging.StreamHandler',
            'formatter': 'core'
        },
        'http_handler': {
            'class': 'backend.httpLogger.HTTPHandler',
            'url': os.environ['HTTP_LOG_ENDPOINT'],
            'compressed': True,
            'formatter': 'core',
        }
    },
    'root': {
        'handlers': ['root_handler'],
        'level': 'WARNING',
        'propagate': True
    },
    'loggers': {
        'okta_auth': {
            'handlers': ['core_handler'],
            'level': "INFO",
            'propagate': False,
        },
    }
}

django_loggers = {
    logger_name: {
        'level': 'WARNING',
        'handlers': ['console'],
        'propagate': True,
    } for logger_name in [
        '',
        'django.dispatch',
        'django',
        'django.request',
        'django.db.backends',
        'django.template',
        'core'
    ]}

LOGGING['loggers'].update(django_loggers)


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    # Tell Django where to look for React's static files (css, js)
    os.path.join(BASE_DIR, "frontend", "static"),
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
if not os.path.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)

